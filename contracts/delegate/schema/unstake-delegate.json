{
  "contract_name": "unstake-delegate",
  "contract_version": "0.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "A delegate is instantiated for each individual Unbonding transaction. We can't guarantee any specific ID to be returned from a staked token provider, therefore this contract provides atomic unstaking with a known start time and debt amount, such that we can calculate the debt value for only this unbonding, when it completes",
    "type": "object",
    "required": [
      "adapter",
      "controller",
      "offer",
      "unbond_amount"
    ],
    "properties": {
      "adapter": {
        "description": "The adapter for unbonding,",
        "allOf": [
          {
            "$ref": "#/definitions/Adapter"
          }
        ]
      },
      "controller": {
        "description": "The Unstake controller address that instantiated this contract",
        "allOf": [
          {
            "$ref": "#/definitions/Addr"
          }
        ]
      },
      "offer": {
        "description": "The Offer created by the controller's Broker",
        "allOf": [
          {
            "$ref": "#/definitions/Offer"
          }
        ]
      },
      "unbond_amount": {
        "description": "The amount of the base asset being sent, that should be relayed to the unbonding contract",
        "allOf": [
          {
            "$ref": "#/definitions/CheckedCoin_for_Ask"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Adapter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "eris"
            ],
            "properties": {
              "eris": {
                "$ref": "#/definitions/Eris"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gravedigger"
            ],
            "properties": {
              "gravedigger": {
                "$ref": "#/definitions/Gravedigger"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "quark"
            ],
            "properties": {
              "quark": {
                "$ref": "#/definitions/Quark"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "CheckedCoin_for_Ask": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Eris": {
        "$ref": "#/definitions/Addr"
      },
      "Gravedigger": {
        "$ref": "#/definitions/Addr"
      },
      "Offer": {
        "description": "The details of an offer returned by the Broker",
        "type": "object",
        "required": [
          "fee",
          "offer_amount",
          "reserve_allocation",
          "unbond_amount"
        ],
        "properties": {
          "fee": {
            "description": "The amount of the offer amount that has been retained as a fee to cover interest. amount + fee_amount == unbond_amount * redemption_rate",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "offer_amount": {
            "description": "The amount that we can safely borrow from GHOST and return to the Unstaker",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "reserve_allocation": {
            "description": "The amount of reserves allocated to this offer",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "unbond_amount": {
            "description": "The amount requested for unbonding",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Quark": {
        "type": "object",
        "required": [
          "hub",
          "liq"
        ],
        "properties": {
          "hub": {
            "$ref": "#/definitions/Addr"
          },
          "liq": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Withdraws the completed unbond, and calls back to the controller to repay and handle protocol reserves",
        "type": "object",
        "required": [
          "complete"
        ],
        "properties": {
          "complete": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callback execugted after unbonded funds have been received",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "type": "string",
    "enum": []
  },
  "migrate": null,
  "sudo": null,
  "responses": {}
}
