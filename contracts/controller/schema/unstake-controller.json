{
  "contract_name": "unstake-controller",
  "contract_version": "0.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "adapter",
      "ask_denom",
      "delegate_code_id",
      "min_rate",
      "offer_denom",
      "owner",
      "protocol_fee",
      "protocol_fee_address",
      "reserve_address",
      "unbonding_duration",
      "vault_address"
    ],
    "properties": {
      "adapter": {
        "description": "The adapter for the unbonding process",
        "allOf": [
          {
            "$ref": "#/definitions/Adapter"
          }
        ]
      },
      "ask_denom": {
        "description": "The ask denom of the Broker - ie the LST/receipt token",
        "type": "string"
      },
      "delegate_code_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "min_rate": {
        "description": "The minimum offer rate set on the broker",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "offer_denom": {
        "description": "The offer denom of the Broker - ie the underlying bonded token",
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/Addr"
      },
      "protocol_fee": {
        "$ref": "#/definitions/Decimal"
      },
      "protocol_fee_address": {
        "$ref": "#/definitions/Addr"
      },
      "reserve_address": {
        "$ref": "#/definitions/Addr"
      },
      "unbonding_duration": {
        "description": "The amount of time in seconds that an unbonding takes",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "vault_address": {
        "$ref": "#/definitions/Addr"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Adapter": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "eris"
            ],
            "properties": {
              "eris": {
                "$ref": "#/definitions/Eris"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gravedigger"
            ],
            "properties": {
              "gravedigger": {
                "$ref": "#/definitions/Gravedigger"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "quark"
            ],
            "properties": {
              "quark": {
                "$ref": "#/definitions/Quark"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Eris": {
        "$ref": "#/definitions/Addr"
      },
      "Gravedigger": {
        "$ref": "#/definitions/Addr"
      },
      "Quark": {
        "type": "object",
        "required": [
          "hub",
          "liq"
        ],
        "properties": {
          "hub": {
            "$ref": "#/definitions/Addr"
          },
          "liq": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "type": "object",
            "required": [
              "max_fee"
            ],
            "properties": {
              "callback": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CallbackData"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fee": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called after the GHOST withdrawal has been made. At this point, the only funds on the contract will be the received debt tokens from GHOST, and the received Ask tokens from the user",
        "type": "object",
        "required": [
          "callback"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by a delegate contract when the unbonding process is complete. Returns the unbonded tokens, the debt tokens for ghost, and the corresponding offer",
        "type": "object",
        "required": [
          "complete"
        ],
        "properties": {
          "complete": {
            "type": "object",
            "required": [
              "offer"
            ],
            "properties": {
              "offer": {
                "$ref": "#/definitions/Offer"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the Controller config",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "delegate_code_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "owner": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "protocol_fee": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "protocol_fee_address": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the Broker config",
        "type": "object",
        "required": [
          "update_broker"
        ],
        "properties": {
          "update_broker": {
            "type": "object",
            "properties": {
              "duration": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "min_rate": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackData": {
        "$ref": "#/definitions/Binary"
      },
      "CallbackMsg": {
        "type": "object",
        "required": [
          "callback",
          "data"
        ],
        "properties": {
          "callback": {
            "$ref": "#/definitions/CallbackData"
          },
          "data": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Offer": {
        "description": "The details of an offer returned by the Broker",
        "type": "object",
        "required": [
          "fee",
          "offer_amount",
          "reserve_allocation",
          "unbond_amount"
        ],
        "properties": {
          "fee": {
            "description": "The amount of the offer amount that has been retained as a fee to cover interest. amount + fee_amount == unbond_amount * redemption_rate",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "offer_amount": {
            "description": "The amount that we can safely borrow from GHOST and return to the Unstaker",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "reserve_allocation": {
            "description": "The amount of reserves allocated to this offer",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "unbond_amount": {
            "description": "The amount requested for unbonding",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "offer"
        ],
        "properties": {
          "offer": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "delegates"
        ],
        "properties": {
          "delegates": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "rates"
        ],
        "properties": {
          "rates": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "adapter",
        "ask_denom",
        "debt_denom",
        "delegate_code_id",
        "ghost_denom",
        "offer_denom",
        "owner",
        "protocol_fee",
        "protocol_fee_address",
        "reserve_address",
        "vault_address"
      ],
      "properties": {
        "adapter": {
          "$ref": "#/definitions/Adapter"
        },
        "ask_denom": {
          "type": "string"
        },
        "debt_denom": {
          "type": "string"
        },
        "delegate_code_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ghost_denom": {
          "type": "string"
        },
        "offer_denom": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "protocol_fee": {
          "$ref": "#/definitions/Decimal"
        },
        "protocol_fee_address": {
          "$ref": "#/definitions/Addr"
        },
        "reserve_address": {
          "$ref": "#/definitions/Addr"
        },
        "vault_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Adapter": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "eris"
              ],
              "properties": {
                "eris": {
                  "$ref": "#/definitions/Eris"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "gravedigger"
              ],
              "properties": {
                "gravedigger": {
                  "$ref": "#/definitions/Gravedigger"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "quark"
              ],
              "properties": {
                "quark": {
                  "$ref": "#/definitions/Quark"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Eris": {
          "$ref": "#/definitions/Addr"
        },
        "Gravedigger": {
          "$ref": "#/definitions/Addr"
        },
        "Quark": {
          "type": "object",
          "required": [
            "hub",
            "liq"
          ],
          "properties": {
            "hub": {
              "$ref": "#/definitions/Addr"
            },
            "liq": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "delegates": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DelegatesResponse",
      "type": "object",
      "required": [
        "delegates"
      ],
      "properties": {
        "delegates": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "$ref": "#/definitions/Timestamp"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "offer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OfferResponse",
      "type": "object",
      "required": [
        "amount",
        "fee"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "fee": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "rates": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RatesResponse",
      "type": "object",
      "required": [
        "provider_redemption",
        "vault_debt",
        "vault_interest",
        "vault_max_interest"
      ],
      "properties": {
        "provider_redemption": {
          "$ref": "#/definitions/Decimal"
        },
        "vault_debt": {
          "$ref": "#/definitions/Decimal"
        },
        "vault_interest": {
          "$ref": "#/definitions/Decimal"
        },
        "vault_max_interest": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StatusResponse",
      "type": "object",
      "required": [
        "total_base",
        "total_quote"
      ],
      "properties": {
        "total_base": {
          "description": "The total amount of base asset that has been requested for unbonding",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_quote": {
          "description": "The total amount of quote asset that has been returned from unbonding",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
